import random
import time
import csv
# filename='bubble_sort_log.csv'
# Optimized Python program for implementation of Bubble Sort
def bubbleSort(arr,):
    cmp_count, swap_count = 0, 0
    n = len(arr)


        # step = 1
        # Traverse through all array elements
    for i in range(n):
        swapped = False

        # Last i elements are already in place
        for j in range(0, n-i-1):
            cmp_count += 1
            # Traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
                swap_count += 1

            # writer.writerow([step, arr.copy()])

        if not swapped:
            break

    return cmp_count, swap_count
def countingSort(arr, place):
    size = len(arr)
    output = [0] * size
    count = [0] * 10

    # Calculate count of elements
    for i in range(0, size):
        index = arr[i] // place
        count[index % 10] += 1

    # Calculate cumulative count
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Place the elements in sorted order
    i = size - 1
    while i >= 0:
        index = arr[i] // place
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1

    for i in range(0, size):
        arr[i] = output[i]

# Main function to implement radix sort
def radixSort(arr):
    max_element = max(arr)
    # Apply counting sort to sort elements based on place value.
    place = 1
    while max_element // place > 0:
        countingSort(arr, place)
        place *= 10
    return arr

def time_sorting_algorithm(sort_func, arr, trials=5):
   
    total_time = sum(time_sort(sort_func, arr) for _ in range(trials))
    return total_time / trials


def time_sort(sort_func, arr):
   
    start_time = time.time()
    sort_func(arr.copy())  
    return time.time() - start_time

def time_sorting_algorithms(arr):
   
    bubbleSort_times = []
    radixSort_times = []
   
    for arr in arr:
       
        bubbleSort_time = time_sorting_algorithm(bubbleSort, arr)
        radixSort_time = time_sorting_algorithm(radixSort, arr)
        bubbleSort_times.append(bubbleSort_time)
        radixSort_times.append(radixSort_time)
        print(f"Bubble Sort Times: {bubbleSort_times} seconds")
        print(f"Radix Sort Times: {radixSort_times} seconds")
    
    return bubbleSort_times, radixSort_times



# quick_sort_times_1m, radix_sort_times_1m = time_sorting_algorithms(arrays_1m)
# quick_sort_times_100b, radix_sort_times_100b = time_sorting_algorithms(arrays_100b)


arr = [99907, 87435, 23432, 58131, 21287, 41203, 36905, 98647, 55180, 77793,
85202, 34391, 54322, 23871, 27638, 24792, 22107, 18321, 41357, 43884,
10264, 38507, 10981, 59129, 10312, 72187, 40477, 22077, 93562, 57228,
18392, 56061, 73502, 10572, 68695, 27814, 43071, 59144, 89714, 56358,
35844, 26192, 95062, 90189, 15479, 97889, 77368, 69293, 74618, 18673,
50996, 94895, 67456, 79826, 45202, 36947, 92583, 28581, 87631, 64327,
78792, 18151, 26185, 28996, 67217, 31541, 51846, 51424, 66594, 15850,
85807, 61988, 22164, 19564, 81971, 92521, 24769, 42362, 17993, 54268,
54479, 72112, 52267, 80423, 50742, 11755, 10916, 67172, 40689, 94422,
56488, 73197, 12434, 21313, 95328, 57701, 72846, 57802, 45464, 97684,
52318, 43115, 17991, 22156, 23741, 72274, 94561, 35125, 48736, 62568,
57362, 72744, 72241, 71904, 11345, 44873, 81918, 12689, 18477, 54316,
71850, 26484, 23612, 45176, 61110, 97962, 54172, 13991, 52635, 72374,
72584, 54733, 35811, 58012, 92329, 87515, 54471, 20780, 40734, 26359,
95230, 39002, 28687, 46683, 37762, 29773, 51733, 78124, 70179, 31598,
65899, 41274, 77346, 59657, 67106, 55116, 96937, 82848, 36993, 35252,
89060, 39219, 29277, 18976, 60235, 40795, 57647, 82358, 53594, 73457,
49173, 73294, 82713, 43960, 58553, 72476, 53881, 48682, 85982, 28592,
31439, 18329, 32377, 54349, 15685, 68913, 96425, 24690, 89888, 18534,
10977, 14452, 74125, 67501, 26442, 32948, 39112, 74083, 75988, 64359,
24617, 49018, 76016, 67662, 32915, 39274, 79412, 40195, 97955, 79690,
88926, 11313, 47982, 67147, 33197, 90855, 61807, 60412, 46298, 33113,
62897, 48988, 51261, 71297, 68142, 80977, 82757, 76098, 74743, 58819,
65001, 16844, 61743, 63301, 93241, 64302, 14988, 93580, 10072, 76618,
68248, 38028, 27845, 45861, 97410, 27259, 47009, 43078, 57411, 52988,
37644, 84719, 18627, 94278, 99869, 41347, 52693, 39937, 12937, 69686,
57559, 77360, 10073, 65491, 92999, 29559, 72242, 18732, 86148, 14867,
50413, 87874, 67989, 31474, 60150, 37382, 62385, 85874, 92934, 44644,
63304, 69345, 72643, 59998, 74431, 72787, 39230, 18538, 29702, 58531,
70488, 57472, 21292, 30414, 47661, 46399, 67562, 71531, 74329, 11472,
65158, 20294, 43087, 17884, 76372, 17107, 22958, 31484, 18437, 70315,
45685, 65770, 15263, 22029, 35144, 38730, 44642, 80448, 30650, 84992,
34763, 34978, 75739, 27729, 55969, 12212, 68098, 90282, 16297, 24392,
22776, 30680, 98261, 11211, 76482, 45385, 60741, 60239, 10709, 72096,
12268, 46260, 35158, 68776, 27523, 19152, 45540, 52953, 78676, 72594,
58726, 24480, 72486, 92873, 85961, 21564, 80967, 66950, 92506, 77384,
40201, 65488, 40002, 85052, 66399, 72319, 22583, 19581, 13013, 49768,
46444, 90722, 56952, 22825, 47936, 82909, 27324, 32788, 35255, 50951,
23938, 86979, 50792, 40990, 93697, 23459, 28802, 41544, 93712, 32175,
29153, 75258, 90492, 63914, 68260, 94236, 84280, 17846, 75539, 19884,
46261, 46911, 13297, 55604, 92092, 65997, 82884, 27461, 49851, 15298,
72369, 51245, 20972, 50371, 72330, 28637, 76241, 41134, 58637, 31395,
46797, 28731, 10371, 59533, 74988, 72701, 92802, 96913, 53589, 47293]

bubbleSort_times, radixSort_times = time_sorting_algorithms([arr])
